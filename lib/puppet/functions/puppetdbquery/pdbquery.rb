# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Perform a PuppetDB query
#
#    The first argument is the URL path that should be queried, for
#    example 'nodes' or 'status/nodes/<nodename>'.
#    The second argument if supplied if the query parameter, if it is
#    a string it is assumed to be JSON formatted and sent as is,
#    anything else is converted to JSON and then sent.
#
#    Example: pdbquery('nodes', ['=', ['node', 'active'], true ])
#
Puppet::Functions.create_function(:'puppetdbquery::pdbquery') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    raise(Puppet::ParseError, "pdbquery(): Wrong number of arguments " +
      "given (#{args.size} for 1 or 2)") if args.size < 1 or args.size > 2

    require 'puppet/network/http_pool'
    require 'uri'
    require 'puppet/util/puppetdb'
    require 'puppet/indirector/rest'

    # Query type (URL path)
    t, q = args

    # Query contents
    if q then
      # Convert to JSON if it isn't already
      q=q.to_pson unless q.is_a? String
      params = URI.escape("?query=#{q}")
    else
      params = ''
    end

    conn = Puppet::Network::HttpPool.http_instance(Puppet::Util::Puppetdb.server, Puppet::Util::Puppetdb.port, use_ssl = true)
    response = conn.get("/v1/#{t}#{params}", { "Accept" => "application/json",})

    unless response.kind_of?(Net::HTTPSuccess)
      raise Puppet::ParseError, "PuppetDB query error: [#{response.code}] #{response.msg}"
    end
    PSON.load(response.body)
  
  end
end
