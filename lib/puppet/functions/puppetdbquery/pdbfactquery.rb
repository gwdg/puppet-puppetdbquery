# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Perform a PuppetDB fact query
#
#    The first argument is the node to get facts for.
#    Second argument is optional, if specified only return that specific fact.
#
#    Examples:
#    # Get hash of facts for foo.example.com
#    pdbfactquery('foo.example.com')
#    # Get the uptime fact for foo.example.com
#    pdbfactquery('foo.example.com', 'uptime')
#
Puppet::Functions.create_function(:'puppetdbquery::pdbfactquery') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    raise(Puppet::ParseError, "pdbquery(): Wrong number of arguments " +
                "given (#{args.size} for 1 or 2)") if args.size < 1 or args.size > 2

    Puppet::Parser::Functions.autoloader.load(:pdbquery) unless Puppet::Parser::Functions.autoloader.loaded?(:pdbquery)

    node, fact = args
    if node.is_a?(Array) then
      node.collect { |n| function_pdbfactquery([n,fact]) }
    else
      facts = function_pdbquery(["facts/#{args[0]}"])['facts']
      if fact then
        facts[fact]
      else
        facts
      end
    end
  
  end
end
