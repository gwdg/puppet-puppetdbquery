# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Perform a PuppetDB resource query
#
#    The first argument is the resource query.
#    Second argument is optional but allows you to specify the item you want
#    from the returned hash.
#
#    Returns an array of hashes or array of strings if second argument is provided.
#
#    Examples:
#    # Return an array of hashes describing all files that are owned by root.
#    $ret = pdbresourcequery_all(
#      ['and',
#        ['=','type','File'],
#        ['=',['parameter','owner'],'root']])
#
#    # Return an array of host names having those resources
#    $ret = pdbresourcequery_all(
#      ['and',
#        ['=','type','File'],
#        ['=',['parameter','owner'],'root']], 'certname')
#
Puppet::Functions.create_function(:'puppetdbquery::pdbresourcequery_all') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    raise(Puppet::ParseError, "pdbresourcequery_all(): Wrong number of arguments " +
                "given (#{args.size} for 1 or 2)") if args.size < 1 or args.size > 2

    Puppet::Parser::Functions.autoloader.load(:pdbquery) unless Puppet::Parser::Functions.autoloader.loaded?(:pdbquery)

    resq, info = args
    ret = function_pdbquery(['resources', resq])
    if info then
      ret.collect {|x| x[info]}
    else
      ret
    end
  
  end
end
